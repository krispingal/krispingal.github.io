<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrency on kbabuji</title>
    <link>http://localhost:1313/tags/concurrency/</link>
    <description>Recent content in Concurrency on kbabuji</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jan 2025 14:27:31 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Linked Hashmap Blueprint</title>
      <link>http://localhost:1313/articles/linked-hashmap/</link>
      <pubDate>Sun, 26 Jan 2025 14:27:31 -0600</pubDate>
      <guid>http://localhost:1313/articles/linked-hashmap/</guid>
      <description>&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/articles/linked-hashmap/LinkHashMapInternals.webp&#34;&#xA;    alt=&#34;Hugo logo&#34; height=&#34;400px&#34; loading=&#34;lazy&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;Hash maps (or hash tables) are foundational implementations of the dictionary data structure, natively supported by most high-level programming languages. They provide an efficient way to store and retrieve records using unique identifiers, such as keys, and are widely used in scenarios where random access and fast lookups are required.&lt;/p&gt;&#xA;&lt;p&gt;For instance, consider a pharmacy like CVS or Walgreens, which uses patients&amp;rsquo; Social Security Numbers (SSNs)—a nine-digit unique identifier—to manage patient information. Not all patients visit the pharmacy regularly, so it would be inefficient to store data in a large array indexed by SSNs. Instead, dictionaries allow us to store, retrieve, or delete patient information efficiently, even when the SSNs are sparsely distributed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Promises in Python</title>
      <link>http://localhost:1313/articles/promises-in-python/</link>
      <pubDate>Tue, 31 Dec 2024 00:00:00 -0600</pubDate>
      <guid>http://localhost:1313/articles/promises-in-python/</guid>
      <description>&lt;h2 id=&#34;what-are-promises&#34;&gt;&#xA;  What Are Promises?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-are-promises&#34; aria-label=&#34;Link to section - What Are Promises?&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;In JavaScript, Promises are objects that represent the eventual completion (or failure) of an asynchronous operation and its resulting value. They provide a powerful way to manage asynchronous code, enabling developers to write cleaner and more maintainable logic.&lt;/p&gt;&#xA;&lt;p&gt;Promises allow us to associate handlers for both the success and failure of an asynchronous operation. By treating asynchronous code similarly to synchronous code, they reduce the complexity and improve the readability of workflows that would otherwise be riddled with convoluted callbacks—commonly referred to as &amp;ldquo;callback hell.&amp;rdquo;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
