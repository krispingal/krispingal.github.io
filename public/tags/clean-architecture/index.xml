<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clean Architecture on kbabuji</title>
    <link>http://localhost:1313/tags/clean-architecture/</link>
    <description>Recent content in Clean Architecture on kbabuji</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/clean-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Refining Go-Based Load Balancers with Clean Architecture and Configuration-Driven Setup</title>
      <link>http://localhost:1313/posts/refining-load-balancer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/refining-load-balancer/</guid>
      <description>&lt;p&gt;In the last article, we covered the basics of building a Layer 7 load balancer in Go, touching on routing, SSL termination, and rate limiting. Since then, the focus has been on improving performance, maintainability, and scalability.&lt;/p&gt;&#xA;&lt;p&gt;This article highlights key upgrades like adopting clean architecture, switching to configuration files, and using connection pooling to enhance backend communication. These changes make the system more flexible and set the stage for even more optimizations, including advanced health checkers, which weâ€™ll explore in the next article.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
